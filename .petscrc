# 2D FVM acoustic wave problem with custom Riemann Solver and Slope Limiter
# ----------------------------------------
# Petsc Release Version 3.21.1, unknown 
# The PETSc Team
# petsc-maint@mcs.anl.gov
# https://petsc.org/
# See https://petsc.org/release/changes for recent updates.
# See https://petsc.org/release/faq for problems.
# See https://petsc.org/release/manualpages for help.
# Libraries linked from /nix/store/k268xapi6ifqg7cwyiwblnfk13wjnhc9-petsc-3.21.1/lib
# ----------------------------------------
# Options for all PETSc programs:
# -version # prints PETSc version
# -help intro # prints example description and PETSc version, and exits
# -help # prints example description, PETSc version, and available options for used routines
# -on_error_abort # cause an abort when an error is detected. Useful 
# only when run in the debugger
# -on_error_attach_debugger [gdb,dbx,xxgdb,ups,noxterm]
# start the debugger in new xterm
# unless noxterm is given
# -start_in_debugger [gdb,dbx,xxgdb,ups,noxterm]
# start all processes in the debugger
# -on_error_emacs <machinename>
# emacs jumps to error file
# -debugger_ranks [n1,n2,..] Ranks to start in debugger
# -debugger_pause [m]  # delay (in seconds) to attach debugger
# -stop_for_debugger  # prints message on how to attach debugger manually
# waits the delay for you to attach
# -display display # Location where X window graphics and debuggers are displayed
# -no_signal_handler # do not trap error signals
# -mpi_return_on_error # MPI returns error code, rather than abort on internal error
# -fp_trap # stop on floating point exceptions
# note on IBM RS6000 this slows run greatly
# -malloc_dump <optional filename> # dump list of unfreed memory at conclusion
# -on_error_malloc_dump <optional filename> # dump list of unfreed memory on memory error
# -malloc_view <optional filename> # keeps log of all memory allocations, displays in PetscFinalize()
# -malloc_debug <true or false> # enables or disables extended checking for memory corruption
# -options_view # dump list of options inputted
# -options_left # dump list of unused options
# -options_left no # don't dump list of unused options
# -tmp tmpdir # alternative /tmp directory
# -shared_tmp # tmp directory is shared by all processors
# -not_shared_tmp # each processor has separate tmp directory
# -memory_view # print memory usage at end of run
# -get_total_flops # total flops over all processors
# -log_view [ #filename:[format]]: logging objects and events
# -log_trace [filename] # prints trace of all PETSc calls
# -log_exclude <list,of,classnames> # exclude given classes from logging
# -info [filename][ #[~]<list,of,classnames>[:[~]self]]: print verbose information
# -options_file <file> # reads options from file
# -options_monitor # monitor options to standard output, including that set previously e.g. in option files
# -options_monitor_cancel # cancels all hardwired option monitors
# -petsc_sleep n # sleeps n seconds before running program
# ----------------------------------------
# PetscDevice Options:
# -device_enable # <now lazy : formerly lazy> How (or whether) to initialize PetscDevices (choose one of) none lazy eager (PetscDeviceInitialize())
# -default_device_type # <now host : formerly host> Set the PetscDeviceType returned by PETSC_DEVICE_DEFAULT() (choose one of) host cuda hip sycl (PetscDeviceSetDefaultDeviceType())
# -device_select # <now -1 : formerly -1>: Which device to use. Pass (-1) to have PETSc decide or (given they exist) [0-128) for a specific device (PetscDeviceCreate())
# -device_view # <now FALSE : formerly FALSE> Display device information and assignments (forces eager initialization) (PetscDeviceView())
# ----------------------------------------
# PetscDevice host Options:
# -device_view_host # <now FALSE : formerly FALSE> Display device information and assignments (forces eager initialization) (PetscDeviceView())
# ----------------------------------------
# Root PetscDeviceContext Options:
# -root_device_context_device_type # <now host : formerly host> Underlying PetscDevice (choose one of) host cuda hip sycl (PetscDeviceContextSetDevice)
# -root_device_context_stream_type # <now default : formerly default> PetscDeviceContext PetscStreamType (choose one of) default nonblocking default_with_barrier nonblocking_with_barrier (PetscDeviceContextSetStreamType)
# ----------------------------------------
# BLAS options:
# -blas_view # Display number of threads to use for BLAS operations (None)
# -blas_num_threads # <now 1 : formerly 1>: Number of threads to use for BLAS operations (None)
# ----------------------------------------
# My Project's Options:
-infile mesh.msh # <now  : formerly >: The input mesh file ()
# -outfile # <now  : formerly >: The output mesh file ()
#-fv_view
-ts_view
#-dm_view
#-ds_view
#-X_view#
